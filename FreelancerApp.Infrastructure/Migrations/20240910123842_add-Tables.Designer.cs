// <auto-generated />
using System;
using FreelancerApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task2;

#nullable disable

namespace Task2.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240910123842_add-Tables")]
    partial class addTables
    {
        /// <inheritdoc />
        protected  void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Task2.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c70806dc-ebd7-4d9e-b2ff-497a78d5e4f1"),
                            email = "ahmad@gmail.com",
                            name = "Ahmad"
                        });
                });

            modelBuilder.Entity("Task2.Models.Freelancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("hourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("skillSet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Freelancer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21817b57-34dd-436c-a9ee-225dfe69a964"),
                            email = "ManarFuqha@gmail.com",
                            hourlyRate = 50m,
                            name = "Manar",
                            skillSet = "C#, ASP.NET, Java, SQL"
                        });
                });

            modelBuilder.Entity("Task2.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("freelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("projectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("freelancerId");

                    b.HasIndex("projectId");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0d07917-0677-41d3-be54-121a080a6120"),
                            amount = 300m,
                            date = new DateTime(2024, 9, 10, 15, 38, 42, 0, DateTimeKind.Local).AddTicks(1332),
                            freelancerId = new Guid("21817b57-34dd-436c-a9ee-225dfe69a964"),
                            projectId = new Guid("c411dae6-2ca6-4ea7-9f1a-b366f9f518d5")
                        });
                });

            modelBuilder.Entity("Task2.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("clientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("freelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.HasIndex("freelancerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c411dae6-2ca6-4ea7-9f1a-b366f9f518d5"),
                            clientId = new Guid("c70806dc-ebd7-4d9e-b2ff-497a78d5e4f1"),
                            description = "Build a corporate website",
                            title = "Website Development"
                        });
                });

            modelBuilder.Entity("Task2.Models.Payment", b =>
                {
                    b.HasOne("Task2.Models.Freelancer", "freelancer")
                        .WithMany()
                        .HasForeignKey("freelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task2.Models.Project", "project")
                        .WithMany()
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("freelancer");

                    b.Navigation("project");
                });

            modelBuilder.Entity("Task2.Models.Project", b =>
                {
                    b.HasOne("Task2.Models.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task2.Models.Freelancer", "freelancer")
                        .WithMany()
                        .HasForeignKey("freelancerId");

                    b.Navigation("client");

                    b.Navigation("freelancer");
                });
#pragma warning restore 612, 618
        }
    }
}
